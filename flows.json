{
    "id": "0bb2954d-f5fa-4657-9626-984e07a72b92",
    "data": {
        "nodes": [
            {
                "data": {
                    "description": "Implementation of Vector Store using Astra DB with search capabilities",
                    "display_name": "Astra DB",
                    "edited": false,
                    "id": "AstraVectorStoreComponent-U5Qfw",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "embedding": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "embedding",
                                "value": "",
                                "display_name": "Embedding or Astra Vectorize",
                                "advanced": false,
                                "input_types": [
                                    "Embeddings",
                                    "dict"
                                ],
                                "dynamic": false,
                                "info": "Allows either an embedding model or an Astra Vectorize configuration.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "HandleInput"
                            },
                            "ingest_data": {
                                "trace_as_metadata": true,
                                "list": true,
                                "trace_as_input": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "ingest_data",
                                "value": "",
                                "display_name": "Ingest Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "DataInput"
                            },
                            "api_endpoint": {
                                "load_from_db": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "api_endpoint",
                                "value": "",
                                "display_name": "API Endpoint",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "API endpoint URL for the Astra DB service.",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "batch_size": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "batch_size",
                                "value": "",
                                "display_name": "Batch Size",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional number of data to process in a single batch.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "bulk_delete_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "bulk_delete_concurrency",
                                "value": "",
                                "display_name": "Bulk Delete Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk delete operations.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "bulk_insert_batch_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "bulk_insert_batch_concurrency",
                                "value": "",
                                "display_name": "Bulk Insert Batch Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "bulk_insert_overwrite_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "bulk_insert_overwrite_concurrency",
                                "value": "",
                                "display_name": "Bulk Insert Overwrite Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "collection_indexing_policy": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "collection_indexing_policy",
                                "value": "",
                                "display_name": "Collection Indexing Policy",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary defining the indexing policy for the collection.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "collection_name": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "collection_name",
                                "value": "diagnoses",
                                "display_name": "Collection Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "metadata_indexing_exclude": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "metadata_indexing_exclude",
                                "value": "",
                                "display_name": "Metadata Indexing Exclude",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to exclude from the indexing.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "metadata_indexing_include": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "metadata_indexing_include",
                                "value": "",
                                "display_name": "Metadata Indexing Include",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to include in the indexing.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "metric": {
                                "trace_as_metadata": true,
                                "options": [
                                    "cosine",
                                    "dot_product",
                                    "euclidean"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "metric",
                                "value": "cosine",
                                "display_name": "Metric",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional distance metric for vector comparisons in the vector store.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput",
                                "load_from_db": false
                            },
                            "namespace": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "namespace",
                                "value": "",
                                "display_name": "Namespace",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional namespace within Astra DB to use for the collection.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "number_of_results": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "number_of_results",
                                "value": 10,
                                "display_name": "Number of Results",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Number of results to return.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput",
                                "load_from_db": false
                            },
                            "pre_delete_collection": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "pre_delete_collection",
                                "value": false,
                                "display_name": "Pre Delete Collection",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "search_filter": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_filter",
                                "value": {},
                                "display_name": "Search Metadata Filter",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary of filters to apply to the search query.",
                                "title_case": false,
                                "type": "dict",
                                "_input_type": "DictInput"
                            },
                            "search_input": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_input",
                                "value": "",
                                "display_name": "Search Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            },
                            "search_score_threshold": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_score_threshold",
                                "value": 0,
                                "display_name": "Search Score Threshold",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                "title_case": false,
                                "type": "float",
                                "_input_type": "FloatInput"
                            },
                            "search_type": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Similarity",
                                    "Similarity with score threshold",
                                    "MMR (Max Marginal Relevance)"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_type",
                                "value": "Similarity",
                                "display_name": "Search Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Search type to use",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "setup_mode": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Sync",
                                    "Async",
                                    "Off"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "setup_mode",
                                "value": "Sync",
                                "display_name": "Setup Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "token": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "token",
                                "value": "",
                                "display_name": "Astra DB Application Token",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Authentication token for accessing Astra DB.",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            }
                        },
                        "description": "Implementation of Vector Store using Astra DB with search capabilities",
                        "icon": "AstraDB",
                        "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                        ],
                        "display_name": "Astra DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Retriever"
                                ],
                                "selected": "Retriever",
                                "name": "base_retriever",
                                "display_name": "Retriever",
                                "method": "build_base_retriever",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "search_results",
                                "display_name": "Search Results",
                                "method": "search_documents",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "VectorStore"
                                ],
                                "selected": "VectorStore",
                                "name": "vector_store",
                                "display_name": "Vector Store",
                                "method": "cast_vector_store",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "collection_name",
                            "token",
                            "api_endpoint",
                            "search_input",
                            "ingest_data",
                            "namespace",
                            "metric",
                            "batch_size",
                            "bulk_insert_batch_concurrency",
                            "bulk_insert_overwrite_concurrency",
                            "bulk_delete_concurrency",
                            "setup_mode",
                            "pre_delete_collection",
                            "metadata_indexing_include",
                            "embedding",
                            "metadata_indexing_exclude",
                            "collection_indexing_policy",
                            "number_of_results",
                            "search_type",
                            "search_score_threshold",
                            "search_filter"
                        ],
                        "beta": false,
                        "edited": false,
                        "lf_version": "1.0.18"
                    },
                    "type": "AstraDB"
                },
                "dragging": false,
                "height": 837,
                "id": "AstraVectorStoreComponent-U5Qfw",
                "position": {
                    "x": 429.5270955049191,
                    "y": -81.68609441173811
                },
                "positionAbsolute": {
                    "x": 429.5270955049191,
                    "y": -81.68609441173811
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Convert Data into plain text following a specified template.",
                    "display_name": "Parse Data",
                    "id": "ParseData-omIuO",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "data",
                            "template",
                            "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Text",
                                "method": "parse_data",
                                "name": "text",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"
                            },
                            "data": {
                                "advanced": false,
                                "display_name": "Data",
                                "dynamic": false,
                                "info": "The data to convert to text.",
                                "input_types": [
                                    "Data"
                                ],
                                "list": false,
                                "name": "data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "sep": {
                                "advanced": true,
                                "display_name": "Separator",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "name": "sep",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "\n"
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{text}"
                            }
                        },
                        "lf_version": "1.0.18"
                    },
                    "type": "ParseData"
                },
                "dragging": false,
                "height": 369,
                "id": "ParseData-omIuO",
                "position": {
                    "x": 1381.9891337583683,
                    "y": 273.17215285963124
                },
                "positionAbsolute": {
                    "x": 1381.9891337583683,
                    "y": 273.17215285963124
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt",
                    "id": "Prompt-BoCHG",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                            },
                            "context": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "name": "context",
                                "display_name": "context",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            },
                            "question": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "name": "question",
                                "display_name": "question",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "type": "prompt",
                                "value": "{context}\n\n---\nYou are a doctor's assistant and help to retrieve information about patients' diagnoses.\nGiven the patients' diagnoses above, answer the question as best as possible.\nThe retrieved diagnoses may belong to multiple patients.\n\nQuestion: {question}\n\nAnswer: "
                            }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                            "Message"
                        ],
                        "name": "",
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                            "template": [
                                "context",
                                "question"
                            ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "prompt",
                                "hidden": null,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false,
                        "lf_version": "1.0.18"
                    },
                    "type": "Prompt"
                },
                "dragging": false,
                "height": 497,
                "id": "Prompt-BoCHG",
                "position": {
                    "x": 1845.8962963195672,
                    "y": 369.98738985466616
                },
                "positionAbsolute": {
                    "x": 1845.8962963195672,
                    "y": 369.98738985466616
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output",
                    "id": "ChatOutput-KUugW",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "frozen": false,
                        "icon": "ChatOutput",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"
                            },
                            "data_template": {
                                "advanced": true,
                                "display_name": "Data Template",
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "data_template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{text}"
                            },
                            "input_value": {
                                "advanced": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "advanced": true,
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine"
                            },
                            "sender_name": {
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "AI"
                            },
                            "session_id": {
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            }
                        },
                        "lf_version": "1.0.18"
                    },
                    "type": "ChatOutput"
                },
                "dragging": false,
                "height": 297,
                "id": "ChatOutput-KUugW",
                "position": {
                    "x": 2813.9664931487337,
                    "y": 333.33423974713844
                },
                "positionAbsolute": {
                    "x": 2813.9664931487337,
                    "y": 333.33423974713844
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "id": "MistalAIEmbeddings-14nKI",
                "type": "genericNode",
                "position": {
                    "x": -166.27700968011868,
                    "y": 303.68994814944153
                },
                "data": {
                    "type": "MistalAIEmbeddings",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_mistralai.embeddings import MistralAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass MistralAIEmbeddingsComponent(LCModelComponent):\n    display_name = \"MistralAI Embeddings\"\n    description = \"Generate embeddings using MistralAI models.\"\n    icon = \"MistralAI\"\n    name = \"MistalAIEmbeddings\"\n\n    inputs = [\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=[\"mistral-embed\"],\n            value=\"mistral-embed\",\n        ),\n        SecretStrInput(name=\"mistral_api_key\", display_name=\"Mistral API Key\"),\n        IntInput(\n            name=\"max_concurrent_requests\",\n            display_name=\"Max Concurrent Requests\",\n            advanced=True,\n            value=64,\n        ),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", advanced=True, value=5),\n        IntInput(name=\"timeout\", display_name=\"Request Timeout\", advanced=True, value=120),\n        MessageTextInput(\n            name=\"endpoint\",\n            display_name=\"API Endpoint\",\n            advanced=True,\n            value=\"https://api.mistral.ai/v1/\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        if not self.mistral_api_key:\n            raise ValueError(\"Mistral API Key is required\")\n\n        api_key = SecretStr(self.mistral_api_key)\n\n        return MistralAIEmbeddings(\n            api_key=api_key,\n            model=self.model,\n            endpoint=self.endpoint,\n            max_concurrent_requests=self.max_concurrent_requests,\n            max_retries=self.max_retries,\n            timeout=self.timeout,\n        )\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "endpoint": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "endpoint",
                                "value": "https://api.mistral.ai/v1/",
                                "display_name": "API Endpoint",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "max_concurrent_requests": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_concurrent_requests",
                                "value": 64,
                                "display_name": "Max Concurrent Requests",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "max_retries": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_retries",
                                "value": 5,
                                "display_name": "Max Retries",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "mistral_api_key": {
                                "load_from_db": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "mistral_api_key",
                                "value": "",
                                "display_name": "Mistral API Key",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "model": {
                                "trace_as_metadata": true,
                                "options": [
                                    "mistral-embed"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "model",
                                "value": "mistral-embed",
                                "display_name": "Model",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "timeout": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "timeout",
                                "value": 120,
                                "display_name": "Request Timeout",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            }
                        },
                        "description": "Generate embeddings using MistralAI models.",
                        "icon": "MistralAI",
                        "base_classes": [
                            "Embeddings"
                        ],
                        "display_name": "MistralAI Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Embeddings"
                                ],
                                "selected": "Embeddings",
                                "name": "embeddings",
                                "display_name": "Embeddings",
                                "method": "build_embeddings",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "model",
                            "mistral_api_key",
                            "max_concurrent_requests",
                            "max_retries",
                            "timeout",
                            "endpoint"
                        ],
                        "beta": false,
                        "edited": false,
                        "lf_version": "1.0.18"
                    },
                    "id": "MistalAIEmbeddings-14nKI"
                },
                "selected": false,
                "width": 384,
                "height": 383,
                "dragging": false,
                "positionAbsolute": {
                    "x": -166.27700968011868,
                    "y": 303.68994814944153
                }
            },
            {
                "id": "MistralModel-ijJ2m",
                "type": "genericNode",
                "position": {
                    "x": 2338.745132801388,
                    "y": 281.3670705808862
                },
                "data": {
                    "type": "MistralModel",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "api_key": {
                                "load_from_db": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "api_key",
                                "value": "",
                                "display_name": "Mistral API Key",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The Mistral API Key to use for the Mistral model.",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_mistralai import ChatMistralAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.io import BoolInput, DropdownInput, FloatInput, IntInput, SecretStrInput, StrInput\n\n\nclass MistralAIModelComponent(LCModelComponent):\n    display_name = \"MistralAI\"\n    description = \"Generates text using MistralAI LLMs.\"\n    icon = \"MistralAI\"\n    name = \"MistralModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=[\n                \"open-mixtral-8x7b\",\n                \"open-mixtral-8x22b\",\n                \"mistral-small-latest\",\n                \"mistral-medium-latest\",\n                \"mistral-large-latest\",\n                \"codestral-latest\",\n            ],\n            value=\"codestral-latest\",\n        ),\n        StrInput(\n            name=\"mistral_api_base\",\n            display_name=\"Mistral API Base\",\n            advanced=True,\n            info=(\n                \"The base URL of the Mistral API. Defaults to https://api.mistral.ai/v1. \"\n                \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n            ),\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Mistral API Key\",\n            info=\"The Mistral API Key to use for the Mistral model.\",\n            advanced=False,\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", advanced=False, value=0.5),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", advanced=True, value=5),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", advanced=True, value=60),\n        IntInput(name=\"max_concurrent_requests\", display_name=\"Max Concurrent Requests\", advanced=True, value=3),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", advanced=True, value=1),\n        IntInput(name=\"random_seed\", display_name=\"Random Seed\", value=1, advanced=True),\n        BoolInput(name=\"safe_mode\", display_name=\"Safe Mode\", advanced=True),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        mistral_api_key = self.api_key\n        temperature = self.temperature\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        mistral_api_base = self.mistral_api_base or \"https://api.mistral.ai/v1\"\n        max_retries = self.max_retries\n        timeout = self.timeout\n        max_concurrent_requests = self.max_concurrent_requests\n        top_p = self.top_p\n        random_seed = self.random_seed\n        safe_mode = self.safe_mode\n\n        if mistral_api_key:\n            api_key = SecretStr(mistral_api_key)\n        else:\n            api_key = None\n\n        output = ChatMistralAI(\n            max_tokens=max_tokens or None,\n            model_name=model_name,\n            endpoint=mistral_api_base,\n            api_key=api_key,\n            temperature=temperature,\n            max_retries=max_retries,\n            timeout=timeout,\n            max_concurrent_requests=max_concurrent_requests,\n            top_p=top_p,\n            random_seed=random_seed,\n            safe_mode=safe_mode,\n        )\n\n        return output  # type: ignore\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageInput"
                            },
                            "max_concurrent_requests": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_concurrent_requests",
                                "value": 3,
                                "display_name": "Max Concurrent Requests",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "max_retries": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_retries",
                                "value": 5,
                                "display_name": "Max Retries",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "max_tokens": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_tokens",
                                "value": "",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "mistral_api_base": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "mistral_api_base",
                                "value": "",
                                "display_name": "Mistral API Base",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The base URL of the Mistral API. Defaults to https://api.mistral.ai/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "model_name": {
                                "trace_as_metadata": true,
                                "options": [
                                    "open-mixtral-8x7b",
                                    "open-mixtral-8x22b",
                                    "mistral-small-latest",
                                    "mistral-medium-latest",
                                    "mistral-large-latest",
                                    "codestral-latest"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "model_name",
                                "value": "mistral-medium-latest",
                                "display_name": "Model Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "random_seed": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "random_seed",
                                "value": 1,
                                "display_name": "Random Seed",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "safe_mode": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "safe_mode",
                                "value": false,
                                "display_name": "Safe Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "stream": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "stream",
                                "value": false,
                                "display_name": "Stream",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "system_message": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "system_message",
                                "value": "",
                                "display_name": "System Message",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "temperature": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "temperature",
                                "value": "0.1",
                                "display_name": "Temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float",
                                "_input_type": "FloatInput"
                            },
                            "timeout": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "timeout",
                                "value": 60,
                                "display_name": "Timeout",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "top_p": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "top_p",
                                "value": 1,
                                "display_name": "Top P",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float",
                                "_input_type": "FloatInput"
                            }
                        },
                        "description": "Generates text using MistralAI LLMs.",
                        "icon": "MistralAI",
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "display_name": "MistralAI",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "LanguageModel"
                                ],
                                "selected": "LanguageModel",
                                "name": "model_output",
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "system_message",
                            "stream",
                            "max_tokens",
                            "model_name",
                            "mistral_api_base",
                            "api_key",
                            "temperature",
                            "max_retries",
                            "timeout",
                            "max_concurrent_requests",
                            "top_p",
                            "random_seed",
                            "safe_mode"
                        ],
                        "beta": false,
                        "edited": false,
                        "lf_version": "1.0.18"
                    },
                    "id": "MistralModel-ijJ2m"
                },
                "selected": false,
                "width": 384,
                "height": 595,
                "positionAbsolute": {
                    "x": 2338.745132801388,
                    "y": 281.3670705808862
                },
                "dragging": false
            },
            {
                "id": "CreateList-RdSPQ",
                "type": "genericNode",
                "position": {
                    "x": 320.3886302223268,
                    "y": 1095.6543062686899
                },
                "data": {
                    "type": "CreateListOfDiagnosis",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.custom import Component\nfrom langflow.inputs import StrInput\nfrom langflow.schema import Data\nfrom langflow.template import Output\n\n\nclass CreateListComponent(Component):\n    display_name = \"Create List with diagnosis ID and Diagnosis\"\n    description = \"Creates a list of diagnoses with diagnosis_id as metadata.\"\n    icon = \"list\"\n    name = \"CreateListOfDiagnosis\"\n\n    inputs = [\n        StrInput(\n            name=\"diagnoses\",\n            display_name=\"Diagnoses with Diagnosis ID\",\n            info=\"Enter diagnoses in format 'diagnosis_id:diagnosis', one per line.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data List\", name=\"list\", method=\"create_list\"),\n    ]\n\n    def create_list(self) -> list[Data]:\n        data = []\n        for i, item in enumerate(self.diagnoses, start=1):\n            parts = item.split(':', 1)\n            if len(parts) != 2:\n                raise ValueError(f\"Invalid format in line {i}: '{item}'. Expected format: 'diagnosis_id:diagnosis'\")\n            \n            diagnosis_id, diagnosis = parts\n            diagnosis_id = diagnosis_id.strip()\n            diagnosis = diagnosis.strip()\n            \n            if not diagnosis_id or not diagnosis:\n                raise ValueError(f\"Empty diagnosis_id or diagnosis in line {i}: '{item}'\")\n            \n            data.append(Data(data={\n                \"text\": diagnosis,\n                \"diagnosis_id\": diagnosis_id\n            }))\n        \n        self.status = data\n        return data",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "diagnoses": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "diagnoses",
                                "value": [
                                    "Diabetes:Potential diabetes, need sugar test",
                                    "Headache:Seasonal Migraine",
                                    "Virus:Flu virus with high fever"
                                ],
                                "display_name": "Diagnoses with Diagnosis ID",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Enter diagnoses in format 'diagnosis_id:diagnosis', one per line.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            }
                        },
                        "description": "Creates a list of diagnoses with diagnosis_id as metadata.",
                        "icon": "list",
                        "base_classes": [
                            "Data"
                        ],
                        "display_name": "Create List",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "list",
                                "display_name": "Data List",
                                "method": "create_list",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "diagnoses"
                        ],
                        "beta": false,
                        "edited": true
                    },
                    "id": "CreateList-RdSPQ"
                },
                "selected": false,
                "width": 384,
                "height": 425,
                "dragging": false,
                "positionAbsolute": {
                    "x": 320.3886302223268,
                    "y": 1095.6543062686899
                }
            },
            {
                "id": "MistalAIEmbeddings-nevts",
                "type": "genericNode",
                "position": {
                    "x": 333.9620428161451,
                    "y": 1598.5877356160877
                },
                "data": {
                    "type": "MistalAIEmbeddings",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_mistralai.embeddings import MistralAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\n\n\nclass MistralAIEmbeddingsComponent(LCModelComponent):\n    display_name = \"MistralAI Embeddings\"\n    description = \"Generate embeddings using MistralAI models.\"\n    icon = \"MistralAI\"\n    name = \"MistalAIEmbeddings\"\n\n    inputs = [\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=[\"mistral-embed\"],\n            value=\"mistral-embed\",\n        ),\n        SecretStrInput(name=\"mistral_api_key\", display_name=\"Mistral API Key\"),\n        IntInput(\n            name=\"max_concurrent_requests\",\n            display_name=\"Max Concurrent Requests\",\n            advanced=True,\n            value=64,\n        ),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", advanced=True, value=5),\n        IntInput(name=\"timeout\", display_name=\"Request Timeout\", advanced=True, value=120),\n        MessageTextInput(\n            name=\"endpoint\",\n            display_name=\"API Endpoint\",\n            advanced=True,\n            value=\"https://api.mistral.ai/v1/\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        if not self.mistral_api_key:\n            raise ValueError(\"Mistral API Key is required\")\n\n        api_key = SecretStr(self.mistral_api_key)\n\n        return MistralAIEmbeddings(\n            api_key=api_key,\n            model=self.model,\n            endpoint=self.endpoint,\n            max_concurrent_requests=self.max_concurrent_requests,\n            max_retries=self.max_retries,\n            timeout=self.timeout,\n        )\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "endpoint": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "endpoint",
                                "value": "https://api.mistral.ai/v1/",
                                "display_name": "API Endpoint",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "max_concurrent_requests": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_concurrent_requests",
                                "value": 64,
                                "display_name": "Max Concurrent Requests",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "max_retries": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "max_retries",
                                "value": 5,
                                "display_name": "Max Retries",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "mistral_api_key": {
                                "load_from_db": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "mistral_api_key",
                                "value": "",
                                "display_name": "Mistral API Key",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "model": {
                                "trace_as_metadata": true,
                                "options": [
                                    "mistral-embed"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "model",
                                "value": "mistral-embed",
                                "display_name": "Model",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "timeout": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "timeout",
                                "value": 120,
                                "display_name": "Request Timeout",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            }
                        },
                        "description": "Generate embeddings using MistralAI models.",
                        "icon": "MistralAI",
                        "base_classes": [
                            "Embeddings"
                        ],
                        "display_name": "MistralAI Embeddings",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Embeddings"
                                ],
                                "selected": "Embeddings",
                                "name": "embeddings",
                                "display_name": "Embeddings",
                                "method": "build_embeddings",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "model",
                            "mistral_api_key",
                            "max_concurrent_requests",
                            "max_retries",
                            "timeout",
                            "endpoint"
                        ],
                        "beta": false,
                        "edited": false,
                        "lf_version": "1.0.18"
                    },
                    "id": "MistalAIEmbeddings-nevts"
                },
                "selected": false,
                "width": 384,
                "height": 383,
                "positionAbsolute": {
                    "x": 333.9620428161451,
                    "y": 1598.5877356160877
                },
                "dragging": false
            },
            {
                "id": "AstraDB-oatrt",
                "type": "genericNode",
                "position": {
                    "x": 912.3790725263459,
                    "y": 1167.845132167348
                },
                "data": {
                    "type": "AstraDB",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "embedding": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "embedding",
                                "value": "",
                                "display_name": "Embedding or Astra Vectorize",
                                "advanced": false,
                                "input_types": [
                                    "Embeddings",
                                    "dict"
                                ],
                                "dynamic": false,
                                "info": "Allows either an embedding model or an Astra Vectorize configuration.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "HandleInput"
                            },
                            "ingest_data": {
                                "trace_as_metadata": true,
                                "list": true,
                                "trace_as_input": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "ingest_data",
                                "value": "",
                                "display_name": "Ingest Data",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "DataInput"
                            },
                            "api_endpoint": {
                                "load_from_db": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "api_endpoint",
                                "value": "",
                                "display_name": "API Endpoint",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "API endpoint URL for the Astra DB service.",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            },
                            "batch_size": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "batch_size",
                                "value": "",
                                "display_name": "Batch Size",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional number of data to process in a single batch.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "bulk_delete_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "bulk_delete_concurrency",
                                "value": "",
                                "display_name": "Bulk Delete Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk delete operations.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "bulk_insert_batch_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "bulk_insert_batch_concurrency",
                                "value": "",
                                "display_name": "Bulk Insert Batch Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "bulk_insert_overwrite_concurrency": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "bulk_insert_overwrite_concurrency",
                                "value": "",
                                "display_name": "Bulk Insert Overwrite Concurrency",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from loguru import logger\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import DictInput, FloatInput\nfrom langflow.io import (\n    BoolInput,\n    DataInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    MultilineInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Implementation of Vector Store using Astra DB with search capabilities\"\n    documentation: str = \"https://python.langchain.com/docs/integrations/vectorstores/astradb\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        MultilineInput(\n            name=\"search_input\",\n            display_name=\"Search Input\",\n        ),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            is_list=True,\n        ),\n        StrInput(\n            name=\"namespace\",\n            display_name=\"Namespace\",\n            info=\"Optional namespace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.\",\n            options=[\"Sync\", \"Async\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding\",\n            display_name=\"Embedding or Astra Vectorize\",\n            input_types=[\"Embeddings\", \"dict\"],\n            info=\"Allows either an embedding model or an Astra Vectorize configuration.\",  # TODO: This should be optional, but need to refactor langchain-astradb first.\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info=\"Optional dictionary defining the indexing policy for the collection.\",\n            advanced=True,\n            \n            # added\n            value={\n                \"indexes\": [\n                    {\n                        \"name\": \"query_vector_value_idx\",\n                        \"fields\": [\"query_vector_value\"],\n                        \"type\": \"vector\"\n                    }\n                ]\n            }\n            \n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {self.setup_mode}\")\n\n        if not isinstance(self.embedding, dict):\n            embedding_dict = {\"embedding\": self.embedding}\n        else:\n            from astrapy.info import CollectionVectorServiceOptions\n\n            dict_options = self.embedding.get(\"collection_vector_service_options\", {})\n            dict_options[\"authentication\"] = {\n                k: v for k, v in dict_options.get(\"authentication\", {}).items() if k and v\n            }\n            dict_options[\"parameters\"] = {k: v for k, v in dict_options.get(\"parameters\", {}).items() if k and v}\n            embedding_dict = {\n                \"collection_vector_service_options\": CollectionVectorServiceOptions.from_dict(dict_options)\n            }\n            collection_embedding_api_key = self.embedding.get(\"collection_embedding_api_key\")\n            if collection_embedding_api_key:\n                embedding_dict[\"collection_embedding_api_key\"] = collection_embedding_api_key\n\n        vector_store_kwargs = {\n            **embedding_dict,\n            \"collection_name\": self.collection_name,\n            \"token\": self.token,\n            \"api_endpoint\": self.api_endpoint,\n            \"namespace\": self.namespace or None,\n            \"metric\": self.metric or None,\n            \"batch_size\": self.batch_size or None,\n            \"bulk_insert_batch_concurrency\": self.bulk_insert_batch_concurrency or None,\n            \"bulk_insert_overwrite_concurrency\": self.bulk_insert_overwrite_concurrency or None,\n            \"bulk_delete_concurrency\": self.bulk_delete_concurrency or None,\n            \"setup_mode\": setup_mode_value,\n            \"pre_delete_collection\": self.pre_delete_collection or False,\n        }\n\n        if self.metadata_indexing_include:\n            vector_store_kwargs[\"metadata_indexing_include\"] = self.metadata_indexing_include\n        elif self.metadata_indexing_exclude:\n            vector_store_kwargs[\"metadata_indexing_exclude\"] = self.metadata_indexing_exclude\n        elif self.collection_indexing_policy:\n            vector_store_kwargs[\"collection_indexing_policy\"] = self.collection_indexing_policy\n\n        try:\n            vector_store = AstraDBVectorStore(**vector_store_kwargs)\n        except Exception as e:\n            raise ValueError(f\"Error initializing AstraDBVectorStore: {str(e)}\") from e\n\n        self._add_documents_to_vector_store(vector_store)\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store):\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                # documents.append(_input.to_lc_document())\n                doc = _input.to_lc_document()\n                documents.append(doc)\n                logger.debug(f\"Prepared document: {doc}\")\n                \n            else:\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\n\n        if documents:\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                raise ValueError(f\"Error adding documents to AstraDBVectorStore: {str(e)}\") from e\n        else:\n            logger.debug(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self):\n        if self.search_type == \"Similarity with score threshold\":\n            return \"similarity_score_threshold\"\n        elif self.search_type == \"MMR (Max Marginal Relevance)\":\n            return \"mmr\"\n        else:\n            return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self) -> list[Data]:\n        vector_store = self.build_vector_store()\n\n        logger.debug(f\"Search input: {self.search_input}\")\n        logger.debug(f\"Search type: {self.search_type}\")\n        logger.debug(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_input and isinstance(self.search_input, str) and self.search_input.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_input, search_type=search_type, **search_args)\n            except Exception as e:\n                raise ValueError(f\"Error performing search in AstraDBVectorStore: {str(e)}\") from e\n\n            logger.debug(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n            logger.debug(f\"Converted documents to data: {len(data)}\")\n            self.status = data\n            return data\n        else:\n            logger.debug(\"No search input provided. Skipping search.\")\n            return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "collection_indexing_policy": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "collection_indexing_policy",
                                "value": "",
                                "display_name": "Collection Indexing Policy",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary defining the indexing policy for the collection.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "collection_name": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "collection_name",
                                "value": "diagnoses",
                                "display_name": "Collection Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "metadata_indexing_exclude": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "metadata_indexing_exclude",
                                "value": "",
                                "display_name": "Metadata Indexing Exclude",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to exclude from the indexing.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "metadata_indexing_include": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "metadata_indexing_include",
                                "value": "",
                                "display_name": "Metadata Indexing Include",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional list of metadata fields to include in the indexing.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "metric": {
                                "trace_as_metadata": true,
                                "options": [
                                    "cosine",
                                    "dot_product",
                                    "euclidean"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "metric",
                                "value": "",
                                "display_name": "Metric",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional distance metric for vector comparisons in the vector store.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "namespace": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "namespace",
                                "value": "",
                                "display_name": "Namespace",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional namespace within Astra DB to use for the collection.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            },
                            "number_of_results": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "number_of_results",
                                "value": 4,
                                "display_name": "Number of Results",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Number of results to return.",
                                "title_case": false,
                                "type": "int",
                                "_input_type": "IntInput"
                            },
                            "pre_delete_collection": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "pre_delete_collection",
                                "value": false,
                                "display_name": "Pre Delete Collection",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            },
                            "search_filter": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_filter",
                                "value": {},
                                "display_name": "Search Metadata Filter",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Optional dictionary of filters to apply to the search query.",
                                "title_case": false,
                                "type": "dict",
                                "_input_type": "DictInput"
                            },
                            "search_input": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_input",
                                "value": "",
                                "display_name": "Search Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            },
                            "search_score_threshold": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_score_threshold",
                                "value": 0,
                                "display_name": "Search Score Threshold",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                "title_case": false,
                                "type": "float",
                                "_input_type": "FloatInput"
                            },
                            "search_type": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Similarity",
                                    "Similarity with score threshold",
                                    "MMR (Max Marginal Relevance)"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "search_type",
                                "value": "Similarity",
                                "display_name": "Search Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Search type to use",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "setup_mode": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Sync",
                                    "Async",
                                    "Off"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "setup_mode",
                                "value": "Sync",
                                "display_name": "Setup Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Configuration mode for setting up the vector store, with options like 'Sync', 'Async', or 'Off'.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "token": {
                                "load_from_db": true,
                                "required": true,
                                "placeholder": "",
                                "show": true,
                                "name": "token",
                                "value": "",
                                "display_name": "Astra DB Application Token",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Authentication token for accessing Astra DB.",
                                "title_case": false,
                                "password": true,
                                "type": "str",
                                "_input_type": "SecretStrInput"
                            }
                        },
                        "description": "Implementation of Vector Store using Astra DB with search capabilities",
                        "icon": "AstraDB",
                        "base_classes": [
                            "Data",
                            "Retriever",
                            "VectorStore"
                        ],
                        "display_name": "Astra DB",
                        "documentation": "https://python.langchain.com/docs/integrations/vectorstores/astradb",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Retriever"
                                ],
                                "selected": "Retriever",
                                "name": "base_retriever",
                                "display_name": "Retriever",
                                "method": "build_base_retriever",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "search_results",
                                "display_name": "Search Results",
                                "method": "search_documents",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "VectorStore"
                                ],
                                "selected": "VectorStore",
                                "name": "vector_store",
                                "display_name": "Vector Store",
                                "method": "cast_vector_store",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "collection_name",
                            "token",
                            "api_endpoint",
                            "search_input",
                            "ingest_data",
                            "namespace",
                            "metric",
                            "batch_size",
                            "bulk_insert_batch_concurrency",
                            "bulk_insert_overwrite_concurrency",
                            "bulk_delete_concurrency",
                            "setup_mode",
                            "pre_delete_collection",
                            "metadata_indexing_include",
                            "embedding",
                            "metadata_indexing_exclude",
                            "collection_indexing_policy",
                            "number_of_results",
                            "search_type",
                            "search_score_threshold",
                            "search_filter"
                        ],
                        "beta": false,
                        "edited": true,
                        "lf_version": "1.0.18"
                    },
                    "id": "AstraDB-oatrt"
                },
                "selected": false,
                "width": 384,
                "height": 751,
                "dragging": false,
                "positionAbsolute": {
                    "x": 912.3790725263459,
                    "y": 1167.845132167348
                }
            },
            {
                "id": "ChatInput-Vib8h",
                "type": "genericNode",
                "position": {
                    "x": -165.90797852333492,
                    "y": 734.4343981179446
                },
                "data": {
                    "type": "ChatInput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "files": {
                                "trace_as_metadata": true,
                                "file_path": "",
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "files",
                                "value": "",
                                "display_name": "Files",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Files to be sent with the message.",
                                "title_case": false,
                                "type": "file",
                                "_input_type": "FileInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "input_value",
                                "value": "list all the recent diagnoses",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MultilineInput"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "combobox": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "sender",
                                "value": "User",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "DropdownInput"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "sender_name",
                                "value": "User",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "session_id",
                                "value": "",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "should_store_message": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "should_store_message",
                                "value": true,
                                "display_name": "Store Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "title_case": false,
                                "type": "bool",
                                "_input_type": "BoolInput"
                            }
                        },
                        "description": "Get chat inputs from the Playground.",
                        "icon": "ChatInput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files"
                        ],
                        "beta": false,
                        "edited": false,
                        "lf_version": "1.0.18"
                    },
                    "id": "ChatInput-Vib8h"
                },
                "selected": false,
                "width": 384,
                "height": 297,
                "positionAbsolute": {
                    "x": -165.90797852333492,
                    "y": 734.4343981179446
                },
                "dragging": false
            },
            {
                "id": "FilterData-6Z7jb",
                "type": "genericNode",
                "position": {
                    "x": 910.55125234823,
                    "y": -70.31157370115602
                },
                "data": {
                    "type": "PermitFilter",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "resources": {
                                "trace_as_metadata": true,
                                "list": false,
                                "trace_as_input": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "resources",
                                "value": "",
                                "display_name": "Input resources",
                                "advanced": false,
                                "input_types": [
                                    "Data"
                                ],
                                "dynamic": false,
                                "info": "Collection of resources to check for permissions.",
                                "title_case": false,
                                "type": "other",
                                "_input_type": "DataInput"
                            },
                            "action": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "action",
                                "value": "view",
                                "display_name": "Action",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from permit import Permit\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\n\nclass PermitFilterComponent(Component):\n    display_name: str = \"Resource Permission Filter\"\n    description = (\"This component checks user permissions for resources and filters the list based on whether the user has the permission.\")\n    icon = \"filter\"\n    name = \"PermitFilter\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"user\",\n            display_name=\"User Email\",\n            info=\"Email of the user whose permissions are to be checked.\",\n        ),\n        MessageTextInput(\n            name=\"action\",\n            display_name=\"Action\",\n            value=\"view\",\n        ),\n        MessageTextInput(\n            name=\"pdp_url\",\n            display_name=\"Permit PDP URL\",\n            info=\"URL of the Permit PDP service.\",\n        ),\n        MessageTextInput(\n            name=\"token\",\n            display_name=\"Permit Token\",\n            info=\"API token for Permit.\",\n        ),\n        \n        MessageTextInput(\n            name=\"resource_name\",\n            display_name=\"Resource name\",\n            value=\"Diagnosis\",\n        ),\n        MessageTextInput(\n            name=\"resource_id\",\n            display_name=\"Resource ID key\",\n            value=\"diagnosis_id\",\n        ),\n        DataInput(\n            name=\"resources\",\n            display_name=\"Input resources\",\n            info=\"Collection of resources to check for permissions.\"\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Permitted Resources\", name=\"permitted_resources\", method=\"filter_resources\")\n    ]\n\n    async def filter_resources(self) -> Data:\n        required_fields = ['user', 'action', 'pdp_url', 'token', 'resources', 'resource_name', 'resource_id']\n        \n        if any(not getattr(self, field) for field in required_fields):\n            raise ValueError(f\"Missing required input fields: {', '.join(field for field in required_fields if not getattr(self, field))}\")\n    \n        permit = Permit(pdp=self.pdp_url, token=self.token)\n    \n        try:\n            check_results = await permit.bulk_check(\n                {\n                    \"user\": self.user,\n                    \"action\": self.action,\n                    \"resource\": f\"{self.resource_name}:{getattr(item, self.resource_id, None)}\",\n                }\n                for item in self.resources\n            )\n    \n            return [\n                resource for resource, result in zip(self.resources, check_results) if result\n            ]\n        except Exception as e:\n            raise RuntimeError(f\"Error during bulk check: {str(e)}\") from e\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "pdp_url": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "pdp_url",
                                "value": "https://14fa-95-214-217-70.ngrok-free.app",
                                "display_name": "Permit PDP URL",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "URL of the Permit PDP service.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "resource_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "resource_id",
                                "value": "diagnosis_id",
                                "display_name": "Resource ID key",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "resource_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "resource_name",
                                "value": "Diagnosis",
                                "display_name": "Resource name",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "token": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "token",
                                "value": "PERMIT_KEY",
                                "display_name": "Permit Token",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "API token for Permit.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            },
                            "user": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "user",
                                "value": "bartosz@health.app",
                                "display_name": "User Email",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Email of the user whose permissions are to be checked.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "MessageTextInput"
                            }
                        },
                        "description": "This component checks user permissions for resources and filters the list based on whether the user has the permission.",
                        "icon": "filter",
                        "base_classes": [
                            "Data"
                        ],
                        "display_name": "Filter Data",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Data"
                                ],
                                "selected": "Data",
                                "name": "permitted_resources",
                                "display_name": "Permitted Resources",
                                "method": "filter_resources",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "user",
                            "action",
                            "pdp_url",
                            "token",
                            "resource_name",
                            "resource_id",
                            "resources"
                        ],
                        "beta": false,
                        "edited": true,
                        "lf_version": "1.0.18"
                    },
                    "id": "FilterData-6Z7jb"
                },
                "selected": false,
                "width": 384,
                "height": 827,
                "positionAbsolute": {
                    "x": 910.55125234823,
                    "y": -70.31157370115602
                },
                "dragging": false
            },
            {
                "id": "CustomComponent-ovkSx",
                "type": "genericNode",
                "position": {
                    "x": -165.2387179608878,
                    "y": -50.119361415887596
                },
                "data": {
                    "type": "PipInstallComponent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import subprocess\nfrom typing import Optional\n\nfrom langflow.custom import Component\nfrom langflow.inputs import StrInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\n\nclass PipInstallComponent(Component):\n    display_name: str = \"Pip Install\"\n    description: str = \"Installs a specified Python library using pip.\"\n    icon = \"download\"\n\n    inputs = [\n        StrInput(\n            name=\"library_name\",\n            display_name=\"Library Name\",\n            info=\"The name of the Python library to install.\",\n            value=\"permit\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Installation Status\", name=\"status\", method=\"install_library\"),\n    ]\n\n    def install_library(self) -> Message:\n        try:\n            # Run the pip install command\n            result = subprocess.run(\n                [\"pip\", \"install\", self.library_name],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            # Capture the output and set it as the status\n            self.status = f\"Successfully installed {self.library_name}\\n{result.stdout}\"\n        except subprocess.CalledProcessError as e:\n            # Handle the error case\n            self.status = f\"Failed to install {self.library_name}\\n{e.stderr}\"\n        \n        return Message(text=self.status)\n\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "library_name": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "name": "library_name",
                                "value": "",
                                "display_name": "Library Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The name of the Python library to install.",
                                "title_case": false,
                                "type": "str",
                                "_input_type": "StrInput"
                            }
                        },
                        "description": "Installs a specified Python library using pip.",
                        "icon": "download",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Pip Install",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "status",
                                "display_name": "Installation Status",
                                "method": "install_library",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "library_name"
                        ],
                        "beta": false,
                        "edited": true
                    },
                    "id": "CustomComponent-ovkSx"
                },
                "selected": true,
                "width": 384,
                "height": 297,
                "dragging": false,
                "positionAbsolute": {
                    "x": -165.2387179608878,
                    "y": -50.119361415887596
                }
            }
        ],
        "edges": [
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-omIuO",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "context",
                        "id": "Prompt-BoCHG",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-ParseData-omIuO{œdataTypeœ:œParseDataœ,œidœ:œParseData-omIuOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-BoCHG{œfieldNameœ:œcontextœ,œidœ:œPrompt-BoCHGœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "source": "ParseData-omIuO",
                "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-omIuOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-BoCHG",
                "targetHandle": "{œfieldNameœ:œcontextœ,œidœ:œPrompt-BoCHGœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
            },
            {
                "source": "MistalAIEmbeddings-14nKI",
                "sourceHandle": "{œdataTypeœ:œMistalAIEmbeddingsœ,œidœ:œMistalAIEmbeddings-14nKIœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                "target": "AstraVectorStoreComponent-U5Qfw",
                "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-U5Qfwœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "embedding",
                        "id": "AstraVectorStoreComponent-U5Qfw",
                        "inputTypes": [
                            "Embeddings",
                            "dict"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "MistalAIEmbeddings",
                        "id": "MistalAIEmbeddings-14nKI",
                        "name": "embeddings",
                        "output_types": [
                            "Embeddings"
                        ]
                    }
                },
                "id": "reactflow__edge-MistalAIEmbeddings-14nKI{œdataTypeœ:œMistalAIEmbeddingsœ,œidœ:œMistalAIEmbeddings-14nKIœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraVectorStoreComponent-U5Qfw{œfieldNameœ:œembeddingœ,œidœ:œAstraVectorStoreComponent-U5Qfwœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "Prompt-BoCHG",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-BoCHGœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "MistralModel-ijJ2m",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œMistralModel-ijJ2mœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "MistralModel-ijJ2m",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-BoCHG",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Prompt-BoCHG{œdataTypeœ:œPromptœ,œidœ:œPrompt-BoCHGœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-MistralModel-ijJ2m{œfieldNameœ:œinput_valueœ,œidœ:œMistralModel-ijJ2mœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "MistralModel-ijJ2m",
                "sourceHandle": "{œdataTypeœ:œMistralModelœ,œidœ:œMistralModel-ijJ2mœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-KUugW",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-KUugWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-KUugW",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "MistralModel",
                        "id": "MistralModel-ijJ2m",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-MistralModel-ijJ2m{œdataTypeœ:œMistralModelœ,œidœ:œMistralModel-ijJ2mœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-KUugW{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-KUugWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "MistalAIEmbeddings-nevts",
                "sourceHandle": "{œdataTypeœ:œMistalAIEmbeddingsœ,œidœ:œMistalAIEmbeddings-nevtsœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
                "target": "AstraDB-oatrt",
                "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-oatrtœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "embedding",
                        "id": "AstraDB-oatrt",
                        "inputTypes": [
                            "Embeddings",
                            "dict"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "MistalAIEmbeddings",
                        "id": "MistalAIEmbeddings-nevts",
                        "name": "embeddings",
                        "output_types": [
                            "Embeddings"
                        ]
                    }
                },
                "id": "reactflow__edge-MistalAIEmbeddings-nevts{œdataTypeœ:œMistalAIEmbeddingsœ,œidœ:œMistalAIEmbeddings-nevtsœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraDB-oatrt{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-oatrtœ,œinputTypesœ:[œEmbeddingsœ,œdictœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "ChatInput-Vib8h",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Vib8hœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-BoCHG",
                "targetHandle": "{œfieldNameœ:œquestionœ,œidœ:œPrompt-BoCHGœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "question",
                        "id": "Prompt-BoCHG",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-Vib8h",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-Vib8h{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Vib8hœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-BoCHG{œfieldNameœ:œquestionœ,œidœ:œPrompt-BoCHGœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "CreateList-RdSPQ",
                "sourceHandle": "{œdataTypeœ:œCreateListOfDiagnosisœ,œidœ:œCreateList-RdSPQœ,œnameœ:œlistœ,œoutput_typesœ:[œDataœ]}",
                "target": "AstraDB-oatrt",
                "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-oatrtœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "ingest_data",
                        "id": "AstraDB-oatrt",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "CreateListOfDiagnosis",
                        "id": "CreateList-RdSPQ",
                        "name": "list",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-CreateList-RdSPQ{œdataTypeœ:œCreateListOfDiagnosisœ,œidœ:œCreateList-RdSPQœ,œnameœ:œlistœ,œoutput_typesœ:[œDataœ]}-AstraDB-oatrt{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-oatrtœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "ChatInput-Vib8h",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Vib8hœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "AstraVectorStoreComponent-U5Qfw",
                "targetHandle": "{œfieldNameœ:œsearch_inputœ,œidœ:œAstraVectorStoreComponent-U5Qfwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "search_input",
                        "id": "AstraVectorStoreComponent-U5Qfw",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-Vib8h",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-Vib8h{œdataTypeœ:œChatInputœ,œidœ:œChatInput-Vib8hœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-AstraVectorStoreComponent-U5Qfw{œfieldNameœ:œsearch_inputœ,œidœ:œAstraVectorStoreComponent-U5Qfwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "AstraVectorStoreComponent-U5Qfw",
                "sourceHandle": "{œdataTypeœ:œAstraDBœ,œidœ:œAstraVectorStoreComponent-U5Qfwœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
                "target": "FilterData-6Z7jb",
                "targetHandle": "{œfieldNameœ:œresourcesœ,œidœ:œFilterData-6Z7jbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "resources",
                        "id": "FilterData-6Z7jb",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "AstraDB",
                        "id": "AstraVectorStoreComponent-U5Qfw",
                        "name": "search_results",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-AstraVectorStoreComponent-U5Qfw{œdataTypeœ:œAstraDBœ,œidœ:œAstraVectorStoreComponent-U5Qfwœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-FilterData-6Z7jb{œfieldNameœ:œresourcesœ,œidœ:œFilterData-6Z7jbœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "FilterData-6Z7jb",
                "sourceHandle": "{œdataTypeœ:œPermitFilterœ,œidœ:œFilterData-6Z7jbœ,œnameœ:œpermitted_resourcesœ,œoutput_typesœ:[œDataœ]}",
                "target": "ParseData-omIuO",
                "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-omIuOœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-omIuO",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "PermitFilter",
                        "id": "FilterData-6Z7jb",
                        "name": "permitted_resources",
                        "output_types": [
                            "Data"
                        ]
                    }
                },
                "id": "reactflow__edge-FilterData-6Z7jb{œdataTypeœ:œPermitFilterœ,œidœ:œFilterData-6Z7jbœ,œnameœ:œpermitted_resourcesœ,œoutput_typesœ:[œDataœ]}-ParseData-omIuO{œfieldNameœ:œdataœ,œidœ:œParseData-omIuOœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "className": ""
            }
        ],
        "viewport": {
            "x": 785.7090185804068,
            "y": 99.732564602195,
            "zoom": 0.5398250618222091
        }
    },
    "description": "",
    "name": "Medical RAG authorization",
    "last_tested_version": "1.0.18",
    "endpoint_name": null,
    "is_component": false
}